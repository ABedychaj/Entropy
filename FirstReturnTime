import math
import random

k = 4  # Przesunięcie Bernulliego (1/(k+1),4/(k+1));
prob = 1. / (k + 1)  # Prawdopodobieństwo symbolu '1';
entropy = -(1. - prob) * math.log(1. - prob, 2.) - prob * math.log(prob, 2.)
print(entropy)

Max_Block = 30  # maksymalny blok
N = round(2 ** (
    entropy * Max_Block))  # całkowita długość binarnego bloku x1x2x3... Istnieje szansa, że powrót nie pojawi się dla dużego bloku (bliskiego Max_Block) w próbce o długości N
print(N)

x = list()  # generowanie ciągu Bernulliego
for i in range(1, N):
    x.append(math.trunc(random.randint(1, k) / k))
# print(x)

t = x.count(1) / N  # prawdopodobienstwo '1'
print(t)



